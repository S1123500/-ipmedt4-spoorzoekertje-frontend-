{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGeolocated = void 0;\n\nconst react_1 = require(\"react\");\n/**\n * Hook abstracting away the interaction with the Geolocation API.\n * @param config - the configuration to use\n */\n\n\nfunction useGeolocated() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    positionOptions = {\n      enableHighAccuracy: true,\n      maximumAge: 0,\n      timeout: Infinity\n    },\n    isOptimisticGeolocationEnabled = true,\n    userDecisionTimeout = undefined,\n    suppressLocationOnMount = false,\n    watchPosition = false,\n    geolocationProvider = typeof navigator !== \"undefined\" ? navigator.geolocation : undefined,\n    onError,\n    onSuccess\n  } = config;\n  const userDecisionTimeoutId = (0, react_1.useRef)(0);\n  const isCurrentlyMounted = (0, react_1.useRef)(true);\n  const watchId = (0, react_1.useRef)(0);\n  const [isGeolocationEnabled, setIsGeolocationEnabled] = (0, react_1.useState)(isOptimisticGeolocationEnabled);\n  const [coords, setCoords] = (0, react_1.useState)();\n  const [timestamp, setTimestamp] = (0, react_1.useState)();\n  const [positionError, setPositionError] = (0, react_1.useState)();\n  const cancelUserDecisionTimeout = (0, react_1.useCallback)(() => {\n    if (userDecisionTimeoutId.current) {\n      window.clearTimeout(userDecisionTimeoutId.current);\n    }\n  }, []);\n  const handlePositionError = (0, react_1.useCallback)(error => {\n    cancelUserDecisionTimeout();\n\n    if (isCurrentlyMounted.current) {\n      setCoords(() => undefined);\n      setIsGeolocationEnabled(false);\n      setPositionError(error);\n    }\n\n    onError === null || onError === void 0 ? void 0 : onError(error);\n  }, [onError, cancelUserDecisionTimeout]);\n  const handlePositionSuccess = (0, react_1.useCallback)(position => {\n    cancelUserDecisionTimeout();\n\n    if (isCurrentlyMounted.current) {\n      setCoords(position.coords);\n      setTimestamp(position.timestamp);\n      setIsGeolocationEnabled(true);\n      setPositionError(() => undefined);\n    }\n\n    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(position);\n  }, [onSuccess, cancelUserDecisionTimeout]);\n  const getPosition = (0, react_1.useCallback)(() => {\n    if (!geolocationProvider || !geolocationProvider.getCurrentPosition || !geolocationProvider.watchPosition) {\n      throw new Error(\"The provided geolocation provider is invalid\");\n    }\n\n    const funcPosition = (watchPosition ? geolocationProvider.watchPosition : geolocationProvider.getCurrentPosition).bind(geolocationProvider);\n\n    if (userDecisionTimeout) {\n      userDecisionTimeoutId.current = window.setTimeout(() => {\n        handlePositionError();\n      }, userDecisionTimeout);\n    }\n\n    watchId.current = funcPosition(handlePositionSuccess, handlePositionError, positionOptions);\n  }, [geolocationProvider, watchPosition, userDecisionTimeout, handlePositionError, handlePositionSuccess, positionOptions]);\n  (0, react_1.useEffect)(() => {\n    if (!suppressLocationOnMount) {\n      getPosition();\n    }\n\n    return () => {\n      cancelUserDecisionTimeout();\n\n      if (watchPosition && watchId.current) {\n        geolocationProvider === null || geolocationProvider === void 0 ? void 0 : geolocationProvider.clearWatch(watchId.current);\n      }\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    getPosition,\n    coords,\n    timestamp,\n    isGeolocationEnabled,\n    isGeolocationAvailable: Boolean(geolocationProvider),\n    positionError\n  };\n}\n\nexports.useGeolocated = useGeolocated;","map":null,"metadata":{},"sourceType":"script"}